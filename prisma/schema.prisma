generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Company {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     User[]
  properties Property[]
  subscriptions Subscription[]
}

model Subscription {
  id          String   @id @default(cuid())
  companyId   String
  stripeCustId String?
  stripeSubId  String?
  status      String   @default("trialing")
  plan        String   @default("standard")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  displayName String
  role        String   @default("asset_manager")
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sessions    Session[]
  messages    Message[]
  tasksAssigned Task[]  @relation("TaskAssignee")
  tasksCreated Task[]   @relation("TaskCreator")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Property {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  address     String
  unitCount   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  channels Channel[]
  rentRollSnapshots RentRollSnapshot[]
  compSnapshots     CompSnapshot[]
}

model Channel {
  id          String   @id @default(cuid())
  propertyId  String
  key         String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  messages Message[]
  tasks    Task[]
}

model Message {
  id          String   @id @default(cuid())
  channelId   String?
  taskId      String?
  authorId    String
  content     String
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())

  channel Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id          String     @id @default(cuid())
  channelId   String
  title       String
  description String?
  status      TaskStatus @default(OPEN)
  priority    Priority   @default(MEDIUM)
  assigneeId  String?
  createdById String
  dueAt       DateTime?
  slaAt       DateTime?
  tags        String[]
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  assignee  User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy User    @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  messages  Message[]
}

model RentRollSnapshot {
  id         String   @id @default(cuid())
  propertyId String
  date       DateTime
  createdAt  DateTime @default(now())
  aggregates Json
  units      Json

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model CompSnapshot {
  id         String   @id @default(cuid())
  propertyId String
  date       DateTime
  comps      Json
  createdAt  DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model ActivityEvent {
  id        String   @id @default(cuid())
  userHash  String
  recordIdHash String?
  pms       String
  url       String
  action    String
  success   Boolean  @default(true)
  duration  Int?
  metadata  Json?
  createdAt DateTime @default(now())
}